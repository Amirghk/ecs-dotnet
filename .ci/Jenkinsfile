#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'linux && immutable' }
  environment {
    REPO = 'ecs-dotnet'
    BASE_DIR = "ecs-dotnet"
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
    DOTNET_CLI_TELEMETRY_OPTOUT = 'true'
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE = 'true'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true, shallow: false)
        dir("${BASE_DIR}"){
          sh(label: 'Fetch tags', script: 'git fetch --prune --tags')
        }
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Windows') {
      agent { label 'windows-2019-immutable' }
      options { skipDefaultCheckout() }
      environment {
        HOME = "${env.WORKSPACE}"
        DOTNET_ROOT = "C:\\Program Files\\dotnet"
        PATH = "${env.DOTNET_ROOT};${env.DOTNET_ROOT}\\tools;${env.PATH};${env.HOME}\\bin"
        MSBUILDDEBUGPATH = "${env.WORKSPACE}"
      }
      when {
        not { buildingTag() }
        beforeAgent true
      }
      steps {
        withGithubNotify(context: 'Windows') {
          unstash 'source'
          dir("${BASE_DIR}"){
            bat script: 'choco install dotnet-sdk -m -y --no-progress -r --version 6.0.400', label: 'Tools'
            bat script: 'build.bat clean -c false', label: 'build'
            bat script: 'build.bat release -c false', label: 'build'
          }
        }
      }
      post {
        unsuccessful {
          archiveArtifacts(allowEmptyArchive: true, artifacts: "${MSBUILDDEBUGPATH}/**/MSBuild_*.failure.txt")
        }
        always {
          dir("${BASE_DIR}"){
            junit(allowEmptyResults: true, keepLongStdio: true, testResults: 'build/output/junit-*.xml')
            archiveArtifacts(allowEmptyArchive: true, artifacts: 'build/output/**/*')
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult()
    }
  }
}

def dotnet(Closure body){
  def dockerTagName = 'docker.elastic.co/observability-ci/ecs-dotnet-sdk-linux:latest'
  // When running in the CI with multiple parallel stages
  // the access could be considered as a DDOS attack.
  retryWithSleep(retries: 2, seconds: 5, backoff: true) {
    sh label: 'Docker build', script: "docker build --tag ${dockerTagName} .ci/docker/sdk-linux"
  }
  docker.image("${dockerTagName}").inside("-e HOME='${env.WORKSPACE}/${env.BASE_DIR}'"){
    body()
  }
}
